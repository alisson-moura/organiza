/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Organiza
 * API para o app organiza.
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import * as axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios'
import type {
  CreateUserDto,
  UpdateUserDto,
  UserDto
} from '../../model'



export const usersControllerCreate = (
    createUserDto: CreateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.post(
      `http://localhost:3001/profile`,
      createUserDto,options
    );
  }



export const getUsersControllerCreateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerCreate>>, {data: CreateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  usersControllerCreate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerCreate>>>
    export type UsersControllerCreateMutationBody = CreateUserDto
    export type UsersControllerCreateMutationError = AxiosError<void>

    export const useUsersControllerCreate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerCreate>>, TError,{data: CreateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerCreate>>,
        TError,
        {data: CreateUserDto},
        TContext
      > => {

      const mutationOptions = getUsersControllerCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usersControllerMe = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<UserDto>> => {
    
    return axios.default.get(
      `http://localhost:3001/profile`,options
    );
  }


export const getUsersControllerMeQueryKey = () => {
    return [`http://localhost:3001/profile`] as const;
    }

    
export const getUsersControllerMeQueryOptions = <TData = Awaited<ReturnType<typeof usersControllerMe>>, TError = AxiosError<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerMe>>, TError, TData>>, axios?: AxiosRequestConfig}
) => {

const {query: queryOptions, axios: axiosOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getUsersControllerMeQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof usersControllerMe>>> = ({ signal }) => usersControllerMe({ signal, ...axiosOptions });

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof usersControllerMe>>, TError, TData> & { queryKey: QueryKey }
}

export type UsersControllerMeQueryResult = NonNullable<Awaited<ReturnType<typeof usersControllerMe>>>
export type UsersControllerMeQueryError = AxiosError<void>


export function useUsersControllerMe<TData = Awaited<ReturnType<typeof usersControllerMe>>, TError = AxiosError<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerMe>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerMe>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersControllerMe<TData = Awaited<ReturnType<typeof usersControllerMe>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerMe>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof usersControllerMe>>,
          TError,
          TData
        > , 'initialData'
      >, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useUsersControllerMe<TData = Awaited<ReturnType<typeof usersControllerMe>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerMe>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }

export function useUsersControllerMe<TData = Awaited<ReturnType<typeof usersControllerMe>>, TError = AxiosError<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof usersControllerMe>>, TError, TData>>, axios?: AxiosRequestConfig}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getUsersControllerMeQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const usersControllerUpdate = (
    updateUserDto: UpdateUserDto, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.patch(
      `http://localhost:3001/profile`,
      updateUserDto,options
    );
  }



export const getUsersControllerUpdateMutationOptions = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{data: UpdateUserDto}, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerUpdate>>, {data: UpdateUserDto}> = (props) => {
          const {data} = props ?? {};

          return  usersControllerUpdate(data,axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerUpdate>>>
    export type UsersControllerUpdateMutationBody = UpdateUserDto
    export type UsersControllerUpdateMutationError = AxiosError<void>

    export const useUsersControllerUpdate = <TError = AxiosError<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerUpdate>>, TError,{data: UpdateUserDto}, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerUpdate>>,
        TError,
        {data: UpdateUserDto},
        TContext
      > => {

      const mutationOptions = getUsersControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const usersControllerRemove = (
     options?: AxiosRequestConfig
 ): Promise<AxiosResponse<void>> => {
    
    return axios.default.delete(
      `http://localhost:3001/profile`,options
    );
  }



export const getUsersControllerRemoveMutationOptions = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,void, TContext> => {
const {mutation: mutationOptions, axios: axiosOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof usersControllerRemove>>, void> = () => {
          

          return  usersControllerRemove(axiosOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UsersControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof usersControllerRemove>>>
    
    export type UsersControllerRemoveMutationError = AxiosError<unknown>

    export const useUsersControllerRemove = <TError = AxiosError<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof usersControllerRemove>>, TError,void, TContext>, axios?: AxiosRequestConfig}
): UseMutationResult<
        Awaited<ReturnType<typeof usersControllerRemove>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getUsersControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions);
    }
    