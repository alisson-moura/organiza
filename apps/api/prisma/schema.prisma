generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String   @map("password_hash")
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Groups Group[]
  Member Member[]
  Invite Invite[]

  @@map("users")
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String
  avatarUrl   String?  @map("avatar_url")
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  Owner  User     @relation(fields: [ownerId], references: [id])
  Member Member[]
  Invite Invite[]

  @@map("groups")
}

enum Role {
  Lider
  Organizador
  Participante
  Observador
}

model Member {
  id      String @id @default(uuid())
  role    Role
  userId  String @map("user_id")
  groupId String @map("group_id")

  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([groupId, userId])
  @@map("members")
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  authorId  String   @map("author_id")
  groupId   String   @map("group_id")
  createdAt DateTime @default(now()) @map("created_at")

  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  group  Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([email])
  @@map("invites")
}
